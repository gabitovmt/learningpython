Оценочные испытания определённых версий Python

(venv) PS C:\Projects\MyProjects\learningpython\src\learning_python\ch21> py -3 script13_pybench_cases.py
3.13.7 experimental free-threading build (tags/v3.13.7:bcee1c3, Aug 14 2025, 14:20:35) [MSC v.1944 64 bit (AMD64)]
0.0710 ['[x ** 2 for x in range(1000)]']
0.1201 ['res=[]\nfor x in range(1000): res.append(x ** 2)']
0.1231 ['list(map(lambda x: x ** 2, range(1000)))']
0.0928 ['list(x ** 2 for x in range(1000))']
0.4755 ["s = 'spam' * 2500\nx = [s[i] for i in range(10000)]"]
1.6765 ["s = '?'\nfor i in range(10000): s += '?'"]

(venv) PS C:\Projects\MyProjects\learningpython\src\learning_python\ch21> py -2 script13_pybench_cases.py
2.7.18 (v2.7.18:8d21aa21f2, Apr 20 2020, 13:25:05) [MSC v.1500 64 bit (AMD64)]
0.0522 ['[x ** 2 for x in range(1000)]']
0.0916 ['res=[]\nfor x in range(1000): res.append(x ** 2)']
0.1141 ['(map(lambda x: x ** 2, range(1000)))']
0.0662 ['list(x ** 2 for x in range(1000))']
0.4513 ["s = 'spam' * 2500\nx = [s[i] for i in range(10000)]"]
1.9317 ["s = '?'\nfor i in range(10000): s += '?'"]

(venv) PS C:\Projects\MyProjects\learningpython\src\learning_python\ch21> C:\devprograms\python\pypy3.11\pypy script13_pybench_cases.py
3.11.13 (413c9b7f57f5, Jul 03 2025, 18:04:37)
[PyPy 7.3.20 with MSC v.1941 64 bit (AMD64)]
0.0025 ['[x ** 2 for x in range(1000)]']
0.0058 ['res=[]\nfor x in range(1000): res.append(x ** 2)']
0.0126 ['list(map(lambda x: x ** 2, range(1000)))']
0.0165 ['list(x ** 2 for x in range(1000))']
0.1503 ["s = 'spam' * 2500\nx = [s[i] for i in range(10000)]"]
2.6099 ["s = '?'\nfor i in range(10000): s += '?'"]


Оценочные испытания нескольких версий Python

(venv) PS C:\Projects\MyProjects\learningpython\src\learning_python\ch21> py -3 script13_pybench_cases.py -a
3.13.7 experimental free-threading build (tags/v3.13.7:bcee1c3, Aug 14 2025, 14:20:35) [MSC v.1944 64 bit (AMD64)]
--------------------------------------------------------------------------------
['[x ** 2 for x in range(1000)]']
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 62.6 usec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 48.8 usec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' '[x ** 2 for x in range(1000)]'
------------------------------------------------------------
1000 loops, average of 5: 3.89 +- 1.56 usec per loop (using standard deviation)
--------------------------------------------------------------------------------
['res=[]\nfor x in range(1000): res.append(x ** 2)']
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 68.9 usec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 86.2 usec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' 'res=[]' 'for x in range(1000): res.append(x ** 2)'
------------------------------------------------------------
1000 loops, average of 5: 6.87 +- 2.07 usec per loop (using standard deviation)
--------------------------------------------------------------------------------
['$listif3(map(lambda x: x ** 2, range(1000)))']
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 106 usec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 102 usec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' 'list(map(lambda x: x ** 2, range(1000)))'
------------------------------------------------------------
1000 loops, average of 5: 7.41 +- 3.04 usec per loop (using standard deviation)
--------------------------------------------------------------------------------
['list(x ** 2 for x in range(1000))']
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 86.4 usec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 59.6 usec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' 'list(x ** 2 for x in range(1000))'
------------------------------------------------------------
1000 loops, average of 5: 21.9 +- 7.11 usec per loop (using standard deviation)
--------------------------------------------------------------------------------
["s = 'spam' * 2500\nx = [s[i] for i in range(10000)]"]
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 335 usec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 419 usec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' "s = 'spam' * 2500" 'x = [s[i] for i in range(10000)]'
------------------------------------------------------------
1000 loops, average of 5: 184 +- 13.1 usec per loop (using standard deviation)
--------------------------------------------------------------------------------
["s = '?'\nfor i in range(10000): s += '?'"]
C:\devprograms\python\Python313\python
        1000 loops, best of 5: 1.96 msec per loop
C:\devprograms\python\Python27\python
        1000 loops, best of 5: 1.55 msec per loop
C:\devprograms\python\pypy3.11\pypy
        WARNING: timeit is a very unreliable tool. use pyperf or something else for real measurements
pypy.exe -m pip install pyperf
pypy.exe -m pyperf timeit -n '1000' -r '5' "s = '?'" "for i in range(10000): s += '?'"
------------------------------------------------------------
1000 loops, average of 5: 2.32 +- 0.0967 msec per loop (using standard deviation)
